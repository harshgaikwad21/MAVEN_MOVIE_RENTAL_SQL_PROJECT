-- GET ALL THE MOVIES LIST

USE MAVENMOVIES;

SELECT * FROM RENTAL ;

SELECT * FROM FILM ;

SELECT * FROM INVENTORY ;

SELECT * FROM PAYMENT ;

SELECT * FROM CUSTOMER ;

SELECT * FROM ADDRESS ;

SELECT * FROM CITY ;

SELECT * FROM COUNTRY ;

SELECT * FROM LANGUAGE ;

SELECT * FROM CATEGORY ;

SELECT * FROM FILM_CATEGORY ;

SELECT * FROM ACTOR ;

SELECT * FROM FILM_ACTOR ;

-- GET THE LIST OF CUSTOMERS AND THEIR EMAIL ID'S

SELECT FIRST_NAME,LAST_NAME,EMAIL
FROM CUSTOMER;

-- GET THE FIRST 10 CUSTOMERS AND THEIR EMAIL ID'S

SELECT CUSTOMER_ID,EMAIL,FIRST_NAME,LAST_NAME
FROM CUSTOMER
LIMIT 10 OFFSET 2;

-- TOTAL REVENUE AND TOTAL TRANSACTIONS

SELECT SUM(AMOUNT) AS REVENUE
FROM PAYMENT;

SELECT COUNT(*) AS TOTAL_TRANSACTIONS
FROM CUSTOMER;

SELECT COUNT(ADDRESS)
FROM ADDRESS;

SELECT AVG(AMOUNT) AS AOV
FROM PAYMENT;

SELECT *,CONCAT(FIRST_NAME," ",LAST_NAME) AS FULL_NAME
FROM CUSTOMER;

SELECT *,LOWER(FIRST_NAME),UPPER(EMAIL)
FROM CUSTOMER;

SELECT *,CONCAT(FIRST_NAME," ",SUBSTRING(LAST_NAME,1,1)) AS USER_NAME
FROM CUSTOMER;

-- FILTERING YOUR RENTAL TABLE AS PER  CUSTOMER 

SELECT * 
FROM RENTAL
WHERE CUSTOMER_ID <= 5;

SELECT * 
FROM RENTAL
ORDER  BY CUSTOMER_ID ASC;

SELECT *
FROM CUSTOMER
WHERE CUSTOMER_ID < 5 AND CUSTOMER_ID > 3;

SELECT *
FROM CUSTOMER
WHERE CUSTOMER_ID < 5 OR CUSTOMER_ID > 3;

SELECT *
FROM CUSTOMER
WHERE CUSTOMER_ID BETWEEN 3 AND 7;

SELECT *
FROM CUSTOMER
WHERE CUSTOMER_ID = 1 OR CUSTOMER_ID = 3 OR CUSTOMER_ID = 5;

SELECT *
FROM CUSTOMER 
WHERE CUSTOMER_ID IN (1,3,5,6,7);

SELECT *
FROM RENTAL
WHERE CUSTOMER_ID = 4
ORDER BY RENTAL_DATE DESC;

-- YOU WANT THE GET DATA ABOUT A CUSTOMER YOU KNOW AS JULIE , BUT DO NOT REMEMBER THE FULL NAME 
SELECT CUSTOMER_ID
FROM CUSTOMER 
WHERE FIRST_NAME LIKE "JU%";        -- % USE AS A PLACE HOLDER TO GET A SHORT NAME 

SELECT *
FROM PAYMENT
WHERE CUSTOMER_ID IN (SELECT CUSTOMER_ID     -- THIS IS CALLED AS SUB QUERY
FROM CUSTOMER 
WHERE FIRST_NAME LIKE "JU%");

-- TAG THE CUSTOMER AS "ACTIVE" AND "INACTIVE"

SELECT *, IF(ACTIVE = "1","ACTIVE_CUSTOMER","INACTIVE_CUSTOMER") AS CUSTOMER_ACTIVITY
FROM CUSTOMER;

-- 

SELECT *,
CASE
	WHEN STORE_ID = 1 AND ACTIVE = 1 THEN "STORE 1 ACTIVE"
	WHEN STORE_ID = 1 AND ACTIVE = 0 THEN "STORE 1 INACTIVE"
	WHEN STORE_ID = 2 AND ACTIVE = 1 THEN "STORE 2 ACTIVE"
	WHEN STORE_ID = 2 AND ACTIVE = 0 THEN "STORE 2 INACTIVE"
    ELSE "ERROR"
END AS STORE_ACTIVITY
FROM CUSTOMER;

--

SELECT F.TITLE,F.DESCRIPTION,INV.STORE_ID,INV.INVENTORY_ID
FROM INVENTORY AS INV INNER JOIN FILM AS F
ON INV.FILM_ID = F.FILM_ID;

SELECT DISTINCT F.TITLE,F.DESCRIPTION              -- DISTINCT IS USE TO SHOW YOU UNIUE VALUES
FROM INVENTORY AS INV INNER JOIN FILM AS F
ON INV.FILM_ID = F.FILM_ID;

SELECT * FROM FILM;

--

SELECT *
FROM FILM
WHERE SPECIAL_FEATURES LIKE "Behind THE Scenes%";

--

(SELECT FIRST_NAME,LAST_NAME,"ADVISER_MEMBER" AS DSIGNATION
FROM ADVISOR

UNION

SELECT FIRST_NAME,LAST_NAME,"STAFF" AS DESIGNATION
FROM STAFF);

-- LIST OF FILES BY FILM NAME, CATEGORY

SELECT F.TITLE AS FILM_NAME, C.NAME AS CATEGORY_NAME 
FROM FILM AS F LEFT JOIN FILM_CATEGORY AS FC
ON F.FILM_ID = FC.FILM_ID LEFT JOIN CATEGORY AS C
ON FC.CATEGORY_ID = C.CATEGORY_ID;

-- FIGURE OUT MOVIES THAT ARE NOT IN INVENTORY

SELECT F.FILM_ID, F.TITLE,F.REPLACEMENT_COST                                                         
FROM FILM AS F LEFT JOIN INVENTORY AS INV
ON INV.FILM_ID = F.FILM_ID
WHERE INV.FILM_ID IS NULL;

-- BEST CUSTOMER BASED ON REVENUE 

SELECT CUSTOMER_ID,SUM(AMOUNT) AS CUSTOMER_REVENUE
FROM PAYMENT
GROUP BY CUSTOMER_ID
ORDER BY CUSTOMER_REVENUE DESC
LIMIT 10;

SELECT C.CUSTOMER_ID,C.FIRST_NAME,C.LAST_NAME,C.EMAIL,SUM(P.AMOUNT) AS REVENUE_PER_CUSTOMER 
FROM PAYMENT AS P LEFT JOIN CUSTOMER AS C 
ON P.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID
ORDER BY REVENUE_PER_CUSTOMER DESC
LIMIT 10;

-- TOP 10 GROSSERS (FILMS BY REVENUE)

SELECT F.FILM_ID, F.TITLE,SUM(P.AMOUNT) AS REVENUE_PER_FILM
FROM PAYMENT AS P LEFT JOIN RENTAL AS R
ON P.RENTAL_ID = R.RENTAL_ID LEFT JOIN INVENTORY AS INV 
ON R.INVENTORY_ID = INV.INVENTORY_ID LEFT JOIN FILM AS F
ON INV.FILM_ID = F.FILM_ID
GROUP BY F.FILM_ID
ORDER BY REVENUE_PER_FILM DESC
LIMIT 10;

-- WE HAVE 2 STORES, FIND THE BEST PERFORMIMG AS PER REVENUE 

SELECT ST.STORE_ID,SUM(P.AMOUNT) AS REVENUE_PER_STORE
FROM PAYMENT AS P LEFT JOIN STAFF AS S
ON P.STAFF_ID = S.STAFF_ID LEFT JOIN STORE AS ST
ON S.STORE_ID = ST.STORE_ID 
GROUP BY ST.STORE_ID
ORDER BY REVENUE_PER_STORE DESC;

-- I WANRT TO SEE CUSTOMERS WHO DID TRANSACTIONS MORE THAN 40 [HAVING]

SELECT CUSTOMER_ID,COUNT(RENTAL_ID) AS NUMBER_OF_TRANSC
FROM RENTAL 
GROUP BY CUSTOMER_ID 
HAVING NUMBER_OF_TRANSC >= 40
ORDER BY NUMBER_OF_TRANSC DESC;

SELECT R.CUSTOMER_ID,C.FIRST_NAME,C.LAST_NAME,C.EMAIL,COUNT(RENTAL_ID) AS NUMBER_OF_TRANSC
FROM RENTAL AS R LEFT JOIN CUSTOMER AS C
ON R.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY CUSTOMER_ID 
HAVING NUMBER_OF_TRANSC >= 40
ORDER BY NUMBER_OF_TRANSC DESC;

-- CUSTOMERS WHO DID TOTAL TRANSACTIONS AMOUNTING MORE THAN 100

SELECT C.CUSTOMER_ID,C.FIRST_NAME,C.LAST_NAME,C.EMAIL,SUM(P.AMOUNT) AS REVENUE_PER_CUSTOMER 
FROM PAYMENT AS P LEFT JOIN CUSTOMER AS C 
ON P.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID
HAVING REVENUE_PER_CUSTOMER >= 180 
ORDER BY REVENUE_PER_CUSTOMER DESC;

-- WE WANT TO FIND OUT THE TRANSACTIONS WHERE CUSTOMERS SPENT MORE THAN THEIR OWN AOV               [SUB QUERY (FROM)] FROM IN FROM

SELECT * 
FROM (SELECT *,AVG(AMOUNT) OVER (PARTITION BY CUSTOMER_ID) AS AOV
FROM PAYMENT) AS X
WHERE AMOUNT > AOV;

-- RANK COSTLIEST DVDS AS 1 INSIDE MOVIE RANKING 

SELECT FILM_ID,RATING,REPLACEMENT_COST,DENSE_RANK() OVER (PARTITION BY RATING ORDER BY REPLACEMENT_COST DESC) AS RANKING
FROM FILM;

-- CATEGORIZE MOVIES AS PER LENGTH

SELECT FILM_ID,TITLE,LENGTH,
CASE
	WHEN LENGTH < 60 THEN "SHORT MOVIES"
    WHEN LENGTH BETWEEN 60 AND 90 THEN "MEDIUM LENGTH MOVIES"
    WHEN LENGTH BETWEEN 90 AND 120 THEN "LONG MOVIES"
    ELSE "BINGE WATCH MOVIES"
END MOVIE_LENGTH
FROM FILM;

-- CATEGORIZING MOVIES TO RECOMMEND  VARIOUS GROUPS AND DEMOGRAPHIC

SELECT FILM_ID,TITLE,RATING,
CASE
	WHEN RATING IN ("MC-17","R") THEN "18+ MOVIES"
    WHEN RATING IN ("G","PG") THEN "ALL AGE GROUPS"
    WHEN RATING = "PG-13" THEN "PARENTEL GUIDENCE"
END AS AGE_GROUPS
FROM FILM;

-- REVENUE TREND LINE CHART

SELECT PAYMENT_DATE,DATE(PAYMENT_DATE) AS DATE_PART,EXTRACT(YEAR FROM PAYMENT_DATE) AS YEAR                   -- [EXTRACT FUNCTION IS USED EXTRACT DATE,MONTH,YEAR AS SEPRRATE]
FROM PAYMENT;

SELECT PAYMENT_ID,EXTRACT(YEAR FROM PAYMENT_DATE) AS YEAR_OF_TRANSC,
PAYMENT_DATE,DATE_FORMAT(PAYMENT_DATE,"%a") AS MONTH_NAME,
DATE_FORMAT(PAYMENT_DATE,"%M") AS MONTH_NAME,DATE_FORMAT(PAYMENT_DATE,"%W") AS WEEKDAY
FROM PAYMENT;

SELECT PAYMENT_DATE,DATE_ADD(PAYMENT_DATE,INTERVAL 7 DAY) ADDED_7_DAYS
FROM PAYMENT;

SELECT *,DATEDIFF(PAYMENT_DATE,LAST_UPDATE) AS DIFFERENCE_IN_DAYS
FROM PAYMENT;

-- CREATING VIEW FOR COMMONLY USE TABLE

CREATE VIEW REVENUE_CALC_TABLE AS
(SELECT P.PAYMENT_ID,P.CUSTOMER_ID,R.RENTAL_ID,P.AMOUNT,INV.INVENTORY_ID,INV.STORE_ID,F.FILM_ID,F.TITLE,P.PAYMENT_DATE
FROM PAYMENT AS P LEFT JOIN RENTAL AS R
ON P.RENTAL_ID = R.RENTAL_ID LEFT JOIN INVENTORY AS INV 
ON R.INVENTORY_ID = INV.INVENTORY_ID LEFT JOIN FILM AS F
ON INV.FILM_ID = F.FILM_ID);

SELECT * 
FROM REVENUE_CALC_TABLE;

WITH REVENUE_TEMP_TABLE AS (SELECT P.PAYMENT_ID,P.CUSTOMER_ID,R.RENTAL_ID,P.AMOUNT,INV.INVENTORY_ID,INV.STORE_ID,F.FILM_ID,F.TITLE,P.PAYMENT_DATE
FROM PAYMENT AS P LEFT JOIN RENTAL AS R
ON P.RENTAL_ID = R.RENTAL_ID LEFT JOIN INVENTORY AS INV 
ON R.INVENTORY_ID = INV.INVENTORY_ID LEFT JOIN FILM AS F
ON INV.FILM_ID = F.FILM_ID)
SELECT *
FROM REVENUE_TEMP_TABLE;

-- project work 

-- Q1
SELECT FIRST_NAME,LAST_NAME,EMAIL
FROM CUSTOMER;

-- Q2
SELECT COUNT(*) AS CHEAPEST_RENTALS
FROM FILM
WHERE RENTAL_RATE = 0.99;

-- Q3
SELECT RENTAL_RATE,COUNT(*) TOTAL_NUM_OF_MOVIES
FROM FILM
GROUP BY RENTAL_RATE;

-- Q4
SELECT RATING,COUNT(*) AS RATING_CATEGORY_COUNT
FROM FILM 
GROUP BY RATING 
ORDER BY RATING_CATEGORY_COUNT DESC;

-- Q5
SELECT INV.store_id,F.rating,COUNT(F.rating) AS TOTAL_FILMS
FROM inventory AS INV LEFT JOIN film AS F
ON INV.film_id = F.film_id
group by INV.store_id,F.rating
order by TOTAL_FILMS DESC;

-- Q6 LIST OF FILMS BY FILM_NAME , CATEGORY AND LANGUAGE
SELECT F.TITLE,LANG.NAME AS LANGUAGE_NAME,C.NAME AS CATEGORY_NAME
FROM FILM AS F LEFT JOIN LANGUAGE AS LANG
ON F.LANGUAGE_ID = LANG.LANGUAGE_ID
LEFT JOIN  FILM_CATEGORY AS FC 
ON F.FILM_ID = FC.FILM_ID
LEFT JOIN CATEGORY AS C 
ON FC.CATEGORY_ID = C.CATEGORY_ID;

-- Q7 How many times each movie has been rented out?

-- Q8 REVENUE PER FILM (TOP 10 GROSSERS) SELECT RENTAL_ID_TRANSACTIONS.TITLE,SUM(P.AMOUNT) AS GROSS_REVENUE
SELECT RENTAL_ID_TRANSACTIONS.TITLE,SUM(P.AMOUNT) AS GROSS_REVENUE
FROM (SELECT R.RENTAL_ID,F.FILM_ID,F.TITLE
		FROM RENTAL AS R LEFT JOIN INVENTORY AS INV
			ON R.INVENTORY_ID = INV.INVENTORY_ID
					LEFT JOIN FILM AS F
			ON INV.FILM_ID = F.FILM_ID) AS RENTAL_ID_TRANSACTIONS
            LEFT JOIN PAYMENT AS P
            ON RENTAL_ID_TRANSACTIONS.RENTAL_ID = P.RENTAL_ID
GROUP BY RENTAL_ID_TRANSACTIONS.TITLE
ORDER BY GROSS_REVENUE DESC
LIMIT 10;



